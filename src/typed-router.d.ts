/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/[...all]': RouteRecordInfo<'/[...all]', '/:all(.*)', { all: ParamValue<true> }, { all: ParamValue<false> }>,
    '/dashboard': RouteRecordInfo<'/dashboard', '/dashboard', Record<never, never>, Record<never, never>>,
    '/homepage': RouteRecordInfo<'/homepage', '/homepage', Record<never, never>, Record<never, never>>,
    '/nested': RouteRecordInfo<'/nested', '/nested', Record<never, never>, Record<never, never>, '/nested/' | '/nested/menu1' | '/nested/menu2' | '/nested/menu2/' | '/nested/menu2/menu2-1' | '/nested/menu2/menu2-2'>,
    '/nested/': RouteRecordInfo<'/nested/', '/nested', Record<never, never>, Record<never, never>>,
    '/nested/menu1': RouteRecordInfo<'/nested/menu1', '/nested/menu1', Record<never, never>, Record<never, never>>,
    '/nested/menu2': RouteRecordInfo<'/nested/menu2', '/nested/menu2', Record<never, never>, Record<never, never>, '/nested/menu2/' | '/nested/menu2/menu2-1' | '/nested/menu2/menu2-2'>,
    '/nested/menu2/': RouteRecordInfo<'/nested/menu2/', '/nested/menu2', Record<never, never>, Record<never, never>>,
    '/nested/menu2/menu2-1': RouteRecordInfo<'/nested/menu2/menu2-1', '/nested/menu2/menu2-1', Record<never, never>, Record<never, never>>,
    '/nested/menu2/menu2-2': RouteRecordInfo<'/nested/menu2/menu2-2', '/nested/menu2/menu2-2', Record<never, never>, Record<never, never>>,
    '/table': RouteRecordInfo<'/table', '/table', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/[...all].vue': {
      routes: '/[...all]'
      views: never
    }
    'src/pages/dashboard.vue': {
      routes: '/dashboard'
      views: never
    }
    'src/pages/homepage.vue': {
      routes: '/homepage'
      views: never
    }
    'src/pages/nested.vue': {
      routes: '/nested' | '/nested/' | '/nested/menu2/' | '/nested/menu1' | '/nested/menu2' | '/nested/menu2/menu2-1' | '/nested/menu2/menu2-2'
      views: 'default'
    }
    'src/pages/nested/index.vue': {
      routes: '/nested/'
      views: never
    }
    'src/pages/nested/menu1.vue': {
      routes: '/nested/menu1'
      views: never
    }
    'src/pages/nested/menu2.vue': {
      routes: '/nested/menu2' | '/nested/menu2/' | '/nested/menu2/menu2-1' | '/nested/menu2/menu2-2'
      views: 'default'
    }
    'src/pages/nested/menu2/index.vue': {
      routes: '/nested/menu2/'
      views: never
    }
    'src/pages/nested/menu2/menu2-1.vue': {
      routes: '/nested/menu2/menu2-1'
      views: never
    }
    'src/pages/nested/menu2/menu2-2.vue': {
      routes: '/nested/menu2/menu2-2'
      views: never
    }
    'src/pages/table.vue': {
      routes: '/table'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
